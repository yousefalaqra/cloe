// <auto-generated />
using System;
using BeHealth.Presentence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BeHealth.Presentence.Migrations
{
    [DbContext(typeof(BeHealthDBContext))]
    [Migration("20210804144315_SubsbscriptionsEntityEdit")]
    partial class SubsbscriptionsEntityEdit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BeHealth.Presentence.Entities.Clients.ClientMeasurementEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BodyFatMass")
                        .HasColumnType("float");

                    b.Property<double>("BodyMassIndex")
                        .HasColumnType("float");

                    b.Property<double>("CaloriesIntake")
                        .HasColumnType("float");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("FatOfLeftArm")
                        .HasColumnType("float");

                    b.Property<double>("FatOfLeftLeg")
                        .HasColumnType("float");

                    b.Property<double>("FatOfRightArm")
                        .HasColumnType("float");

                    b.Property<double>("FatOfRightLeg")
                        .HasColumnType("float");

                    b.Property<double>("FatOfTruck")
                        .HasColumnType("float");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("Minerals")
                        .HasColumnType("float");

                    b.Property<double>("Protien")
                        .HasColumnType("float");

                    b.Property<double>("TotalBodyWater")
                        .HasColumnType("float");

                    b.Property<double>("WaistHipRatio")
                        .HasColumnType("float");

                    b.Property<double>("Wight")
                        .HasColumnType("float");

                    b.Property<double>("skeletalMuscleMass")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientMeasurements");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Clients.ClientObservationsEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientID")
                        .HasColumnName("Client_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ObservationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.ToTable("ClientObservations");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Clients.ClientTagsEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientTags");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Clients.ClientsDiseasesEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientID")
                        .HasColumnName("Client_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("DiseaseName")
                        .HasColumnName("Disease_Name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.ToTable("ClientsDiseases");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Clients.ClinetsMedicationsEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientID")
                        .HasColumnName("Client_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("MedicationName")
                        .HasColumnName("Medication_Name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.ToTable("ClinetsMedications");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.FoodManamgnet.Recipes.RecipeStepsEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeSteps");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.FoodManamgnet.Templates.DayEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<long>("PlanId")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("PlanId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.FoodManamgnet.Templates.MealEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PlanId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("PlanId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.FoodManamgnet.Templates.MealItemEntity", b =>
                {
                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("MealId")
                        .HasColumnType("bigint");

                    b.Property<long>("ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.HasKey("ItemId", "MealId");

                    b.HasIndex("MealId");

                    b.ToTable("MealItems");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.FoodManamgnet.Templates.MealRecipeEntity", b =>
                {
                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<long>("MealId")
                        .HasColumnType("bigint");

                    b.Property<long>("ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipeId", "MealId");

                    b.HasIndex("MealId");

                    b.ToTable("MealRecipes");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.FoodManamgnet.Templates.PlanEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("TemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("TemplateId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Items.FoodItemEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BaseQuantity")
                        .HasColumnType("float");

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<double>("Carbohydrates")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Fat")
                        .HasColumnType("float");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<double>("Protein")
                        .HasColumnType("float");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("UnitId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Locations.GovernorateEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GovernorateNameAR")
                        .HasColumnName("Governorate_Name_AR")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("GovernorateNameEN")
                        .HasColumnName("Governorate_Name_EN")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.ToTable("Governorates");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            GovernorateNameAR = "سلفيت",
                            GovernorateNameEN = "Salfeet"
                        });
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Meals.RecipeCategoriesEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("RecipeId");

                    b.ToTable("MealsCategories");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Meals.RecipeEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("PreparationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Meals.RecipeIngredientEntity", b =>
                {
                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<long>("FoodItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("ID")
                        .HasColumnType("bigint");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.HasKey("RecipeId", "FoodItemId");

                    b.HasIndex("FoodItemId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Organization.ClientEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("clientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex("clientId")
                        .IsUnique()
                        .HasFilter("[clientId] IS NOT NULL");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Organization.ClientWorkplaceEntity", b =>
                {
                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkplaceId")
                        .HasColumnType("bigint");

                    b.HasKey("ClientId", "WorkplaceId");

                    b.HasIndex("WorkplaceId");

                    b.ToTable("ClientWorkplaces");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Organization.OrganizationEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 8, 4, 17, 43, 14, 430, DateTimeKind.Unspecified).AddTicks(3875), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = "SYSTEM",
                            Email = "test@bhealth.com",
                            OrganizationId = "122323",
                            Title = "BeHealth"
                        });
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Organization.UserEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            BirthDate = new DateTime(1993, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 8, 4, 17, 43, 14, 436, DateTimeKind.Unspecified).AddTicks(4622), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = "SYSTEM",
                            EmailAddress = "ameerah@gmail.com",
                            FullName = "Ameerah Karakrah",
                            PhoneNumber = "+970595675811",
                            UserId = "12222345"
                        });
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Organization.UserWorkplaceEntity", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkplaceId")
                        .HasColumnType("bigint");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId", "WorkplaceId");

                    b.HasIndex("WorkplaceId");

                    b.ToTable("UserWorkplaces");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            WorkplaceId = 1L,
                            Role = 0
                        },
                        new
                        {
                            UserId = 1L,
                            WorkplaceId = 2L,
                            Role = 0
                        });
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Organization.WorkPlaceEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Workplaces");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 8, 4, 17, 43, 14, 435, DateTimeKind.Unspecified).AddTicks(8359), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = "SYSTEM",
                            OrganizationId = 1L,
                            Title = "Ramallah - Clinic"
                        },
                        new
                        {
                            ID = 2L,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 8, 4, 17, 43, 14, 435, DateTimeKind.Unspecified).AddTicks(9686), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = "SYSTEM",
                            OrganizationId = 1L,
                            Title = "Biddya - Clinic"
                        });
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Settings.TypesEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<int>("TypeCategory")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasFilter("[Type] IS NOT NULL");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            Type = "Breakfast",
                            TypeCategory = 1
                        },
                        new
                        {
                            ID = 2L,
                            Type = "Lunch",
                            TypeCategory = 1
                        },
                        new
                        {
                            ID = 3L,
                            Type = "Dinner",
                            TypeCategory = 1
                        },
                        new
                        {
                            ID = 4L,
                            Type = "Snack",
                            TypeCategory = 1
                        },
                        new
                        {
                            ID = 5L,
                            Type = "Vegetables",
                            TypeCategory = 0
                        },
                        new
                        {
                            ID = 6L,
                            Type = "Legumes",
                            TypeCategory = 0
                        },
                        new
                        {
                            ID = 7L,
                            Type = "Fruit",
                            TypeCategory = 0
                        },
                        new
                        {
                            ID = 8L,
                            Type = "Grain",
                            TypeCategory = 0
                        },
                        new
                        {
                            ID = 9L,
                            Type = "Starchy",
                            TypeCategory = 0
                        },
                        new
                        {
                            ID = 10L,
                            Type = "Dairy",
                            TypeCategory = 0
                        },
                        new
                        {
                            ID = 11L,
                            Type = "Protein",
                            TypeCategory = 0
                        },
                        new
                        {
                            ID = 12L,
                            Type = "Fat",
                            TypeCategory = 0
                        });
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Settings.UnitEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<double>("GramsRatio")
                        .HasColumnType("float");

                    b.Property<bool>("IsLiquid")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            Code = "جرام",
                            GramsRatio = 1.0,
                            IsLiquid = false
                        },
                        new
                        {
                            ID = 2L,
                            Code = "مللتر",
                            GramsRatio = 1.0,
                            IsLiquid = true
                        },
                        new
                        {
                            ID = 3L,
                            Code = "كوب",
                            GramsRatio = 250.0,
                            IsLiquid = true
                        },
                        new
                        {
                            ID = 4L,
                            Code = "ملعقة",
                            GramsRatio = 15.0,
                            IsLiquid = false
                        },
                        new
                        {
                            ID = 5L,
                            Code = "اوز",
                            GramsRatio = 30.0,
                            IsLiquid = false
                        },
                        new
                        {
                            ID = 6L,
                            Code = "قطعة",
                            GramsRatio = 1.0,
                            IsLiquid = false
                        });
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Subscription.ClientSubscriptionPaymentEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<long>("ClientsSubscriptionsEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ClientsSubscriptionsEntityId");

                    b.ToTable("ClientSubscriptionPayments");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Subscription.ClientsSubscriptionsEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SubscriptionId")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("ClientId", "SubscriptionId")
                        .IsUnique();

                    b.ToTable("ClientsSubscriptions");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Subscription.SubscriptionEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.TemplateEntity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Clients.ClientMeasurementEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.Organization.ClientEntity", "ClientEntity")
                        .WithMany("ClientMeasurements")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Clients.ClientObservationsEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.Organization.ClientEntity", "Client")
                        .WithMany("ClientObservations")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Clients.ClientTagsEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.Organization.ClientEntity", "ClientEntity")
                        .WithMany("ClientTags")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Clients.ClientsDiseasesEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.Organization.ClientEntity", "Client")
                        .WithMany("ClientsDiseases")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Clients.ClinetsMedicationsEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.Organization.ClientEntity", "ClientEntity")
                        .WithMany("ClinetsMedications")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.FoodManamgnet.Recipes.RecipeStepsEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.Meals.RecipeEntity", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.FoodManamgnet.Templates.DayEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.FoodManamgnet.Templates.PlanEntity", "PlanEntity")
                        .WithMany("Days")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.FoodManamgnet.Templates.MealEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.FoodManamgnet.Templates.PlanEntity", "PlanEntity")
                        .WithMany("MealsEntities")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.FoodManamgnet.Templates.MealItemEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.Items.FoodItemEntity", "FoodItem")
                        .WithMany("MealFoodItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeHealth.Presentence.Entities.FoodManamgnet.Templates.MealEntity", "MealEntity")
                        .WithMany("Items")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.FoodManamgnet.Templates.MealRecipeEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.FoodManamgnet.Templates.MealEntity", "MealEntity")
                        .WithMany("Recipes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeHealth.Presentence.Entities.Meals.RecipeEntity", "RecipeEntity")
                        .WithMany("Meals")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.FoodManamgnet.Templates.PlanEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.TemplateEntity", "TemplateEntity")
                        .WithMany("TemplatePlansEntities")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Items.FoodItemEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.Settings.UnitEntity", "UnitEntity")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Meals.RecipeCategoriesEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.Meals.RecipeEntity", "Recipe")
                        .WithMany("RecipeCategoires")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Meals.RecipeIngredientEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.Items.FoodItemEntity", "FoodItemEntity")
                        .WithMany("MealItems")
                        .HasForeignKey("FoodItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeHealth.Presentence.Entities.Meals.RecipeEntity", "RecipeEntity")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Organization.ClientWorkplaceEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.Organization.ClientEntity", "ClientEntity")
                        .WithMany("ClientWorkplaceEntities")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeHealth.Presentence.Entities.Organization.WorkPlaceEntity", "WorkPlaceEntity")
                        .WithMany("ClientWorkplaceEntities")
                        .HasForeignKey("WorkplaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Organization.UserWorkplaceEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.Organization.UserEntity", "UserEntity")
                        .WithMany("UserWorkplaceEntities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeHealth.Presentence.Entities.Organization.WorkPlaceEntity", "WorkPlaceEntity")
                        .WithMany("UserWorkplaceEntities")
                        .HasForeignKey("WorkplaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Organization.WorkPlaceEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.Organization.OrganizationEntity", "OrganizationEntity")
                        .WithMany("WorkPlaceEntities")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Subscription.ClientSubscriptionPaymentEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.Subscription.ClientsSubscriptionsEntity", "ClientsSubscriptionsEntity")
                        .WithMany("ClientSubscriptionPayments")
                        .HasForeignKey("ClientsSubscriptionsEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.Subscription.ClientsSubscriptionsEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.Organization.ClientEntity", "ClientEntity")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeHealth.Presentence.Entities.Subscription.SubscriptionEntity", "SubscriptionEntity")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeHealth.Presentence.Entities.TemplateEntity", b =>
                {
                    b.HasOne("BeHealth.Presentence.Entities.Organization.ClientEntity", "Client")
                        .WithOne("ClientTmplate")
                        .HasForeignKey("BeHealth.Presentence.Entities.TemplateEntity", "ClientId");
                });
#pragma warning restore 612, 618
        }
    }
}
